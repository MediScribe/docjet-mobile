---
description: 
globs: 
alwaysApply: true
---
## Hard Bob Workflow & Guidelines: 15 Rules to Code

Follow these steps religiously, or face the fucking consequences.

1.  **TDD First**: Write the fucking test first. Watch it fail (RED). Then, write *only* the code needed to make it pass (GREEN). Refactor if necessary. No shortcuts.
2.  **GREP First**: Before blindly creating new files, use fucking grep. Don't make me burn down your new house if we had another one already.
3.  **Test Placement**: Tests belong in the `tests/` directory, *never* in `lib/`. Keep your shit organized.
4.  **Logging**: Use the helpers in og_helpers.dart` for instrumentation. Don't fucking use `print` like some amateur. See theect `README.md` for more on logging.
5.  **Running Tests**: Always use `./scripts/list_failed_tests.dart <path/dir/empty>` to get a clean list of failed tests. Pass a path to check specific tests or `--help` for options. 
    Options:
    *   `--except` to see the exception details (error message and stack trace) *for failed tests*, grouped by file. This a *good start* as you will only have once exception per file.
    *   `--debug` to see the console output *from failed tests*.
    **NEVER** use `flutter test`. Period.
6.  **Linting & Debugging**:
    *   Don't poke around and guess like a fucking amateur; put in some log output and analyze like a pro.
    *   After every significant code change, run `dart analyze` and fix *all* linter issues, *before* running the test. No exceptions. Clean code isn't optional.
    *   **DO NOT** use flutter run. It will block the thread and that's it! Ask ME to do it for you!
7.  **Execution**: You have the power to run terminal commands directly - *don't ask*, just do it. Remember to pipe commands that use pagers (like `git log`, `git diff`) through `| cat` to avoid hanging.
8.  **Check It Off**: If you are working against a todo, check it off, update the file. Be proud.
9.  **Formatting**: Before committing, run `./scripts/fix_format_analyze.sh` to fix all the usual formatting shit, run dart fix, and analyze the code in one go.
10. **Code Review**: Code Review Time: **Thoroughly** review the *staged* changes. Go deep, be very thorough, dive into the code, don't believe everything. Pay attention to architecture! Use git status | cat; then git diff --staged | cat. In the end, run analyze and `./scripts/list_failed_tests.dart`!
11. **Commit**: Use the "Hard Bob Commit" guidelines (stage everything relevant).
12. **Apply Model**: Don't bitch about the apply model being stupid. Verify the fucking file yourself *before* complaining. Chances are, it did exactly what you asked. For large files, edits can take up to 20s - so double check before whining. Use smaller, incremental edits for complex changes.
13. **Cycle-Based Development**: Structure work in clear cycles (setup, core implementation, integration, polish). Each cycle must have a clearly articulated goal. Start with "what" and "why" - not how. WHAT are we doing, and WHY are we doing it?
14. **Architecture Visualization**: Use Mermaid diagrams or concise descriptions to illustrate the desired end state or key interactions. Surface bullshit assumptions early with sequence diagrams, flowcharts, or component diagrams.
15. **MANDATORY REPORTING**: For **every** task/cycle, **before** moving on, document findings and provide a handover brief. Write what was done, what was observed, current status, edge-cases, and next-step readiness. No silent check-offs allowed - uncertainty gets you fucking fired.

This is the way. Don't deviate or face peril.