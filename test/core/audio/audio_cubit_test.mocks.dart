// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/core/audio/audio_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:docjet_mobile/core/audio/audio_player_service.dart' as _i5;
import 'package:docjet_mobile/core/audio/audio_recorder_service.dart' as _i2;
import 'package:just_audio/just_audio.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioRecorderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecorderService extends _i1.Mock
    implements _i2.AudioRecorderService {
  MockAudioRecorderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Duration> get elapsed$ => (super.noSuchMethod(
        Invocation.getter(#elapsed$),
        returnValue: _i3.Stream<Duration>.empty(),
      ) as _i3.Stream<Duration>);

  @override
  _i3.Future<void> start() => (super.noSuchMethod(
        Invocation.method(
          #start,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i4.dummyValue<String>(
          this,
          Invocation.method(
            #stop,
            [],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [AudioPlayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayerService extends _i1.Mock
    implements _i5.AudioPlayerService {
  MockAudioPlayerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<Duration> get position$ => (super.noSuchMethod(
        Invocation.getter(#position$),
        returnValue: _i3.Stream<Duration>.empty(),
      ) as _i3.Stream<Duration>);

  @override
  _i3.Stream<Duration> get duration$ => (super.noSuchMethod(
        Invocation.getter(#duration$),
        returnValue: _i3.Stream<Duration>.empty(),
      ) as _i3.Stream<Duration>);

  @override
  _i3.Stream<_i6.ProcessingState> get processingState$ => (super.noSuchMethod(
        Invocation.getter(#processingState$),
        returnValue: _i3.Stream<_i6.ProcessingState>.empty(),
      ) as _i3.Stream<_i6.ProcessingState>);

  @override
  _i3.Future<void> load(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [filePath],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> play() => (super.noSuchMethod(
        Invocation.method(
          #play,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> seek(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seek,
          [position],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> reset() => (super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
