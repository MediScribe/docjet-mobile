// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/core/auth/presentation/auth_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:docjet_mobile/core/auth/auth_service.dart' as _i3;
import 'package:docjet_mobile/core/auth/entities/user.dart' as _i2;
import 'package:docjet_mobile/core/auth/events/auth_event_bus.dart' as _i6;
import 'package:docjet_mobile/core/auth/events/auth_events.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i3.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #login,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i4.Future<_i2.User>);

  @override
  _i4.Future<bool> refreshSession() => (super.noSuchMethod(
        Invocation.method(
          #refreshSession,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> isAuthenticated({bool? validateTokenLocally = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
          {#validateTokenLocally: validateTokenLocally},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<String> getCurrentUserId() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserId,
          [],
        ),
        returnValue: _i4.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #getCurrentUserId,
            [],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<_i2.User> getUserProfile({bool? acceptOfflineProfile = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
          {#acceptOfflineProfile: acceptOfflineProfile},
        ),
        returnValue: _i4.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #getUserProfile,
            [],
            {#acceptOfflineProfile: acceptOfflineProfile},
          ),
        )),
      ) as _i4.Future<_i2.User>);
}

/// A class which mocks [AuthEventBus].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthEventBus extends _i1.Mock implements _i6.AuthEventBus {
  MockAuthEventBus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Stream<_i7.AuthEvent> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i7.AuthEvent>.empty(),
      ) as _i4.Stream<_i7.AuthEvent>);

  @override
  void add(_i7.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
