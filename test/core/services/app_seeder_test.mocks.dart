// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/core/services/app_seeder_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i2;
import 'dart:typed_data' as _i9;

import 'package:docjet_mobile/core/platform/file_system.dart' as _i8;
import 'package:docjet_mobile/core/platform/path_provider.dart' as _i7;
import 'package:docjet_mobile/features/audio_recorder/data/services/audio_duration_retriever.dart'
    as _i10;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/local_job.dart'
    as _i5;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/transcription_status.dart'
    as _i6;
import 'package:docjet_mobile/features/audio_recorder/domain/repositories/local_job_store.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:shared_preferences/src/shared_preferences_legacy.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDirectory_0 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_1 extends _i1.SmartFake implements _i2.FileStat {
  _FakeFileStat_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalJobStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalJobStore extends _i1.Mock implements _i3.LocalJobStore {
  MockLocalJobStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> saveJob(_i5.LocalJob? job) => (super.noSuchMethod(
        Invocation.method(
          #saveJob,
          [job],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.LocalJob?> getJob(String? localFilePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJob,
          [localFilePath],
        ),
        returnValue: _i4.Future<_i5.LocalJob?>.value(),
      ) as _i4.Future<_i5.LocalJob?>);

  @override
  _i4.Future<List<_i5.LocalJob>> getOfflineJobs() => (super.noSuchMethod(
        Invocation.method(
          #getOfflineJobs,
          [],
        ),
        returnValue: _i4.Future<List<_i5.LocalJob>>.value(<_i5.LocalJob>[]),
      ) as _i4.Future<List<_i5.LocalJob>>);

  @override
  _i4.Future<List<_i5.LocalJob>> getAllLocalJobs() => (super.noSuchMethod(
        Invocation.method(
          #getAllLocalJobs,
          [],
        ),
        returnValue: _i4.Future<List<_i5.LocalJob>>.value(<_i5.LocalJob>[]),
      ) as _i4.Future<List<_i5.LocalJob>>);

  @override
  _i4.Future<void> updateJobStatus(
    String? localFilePath,
    _i6.TranscriptionStatus? status, {
    String? backendId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJobStatus,
          [
            localFilePath,
            status,
          ],
          {#backendId: backendId},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteJob(String? localFilePath) => (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [localFilePath],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [PathProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProvider extends _i1.Mock implements _i7.PathProvider {
  MockPathProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Directory> getApplicationDocumentsDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationDocumentsDirectory,
          [],
        ),
        returnValue: _i4.Future<_i2.Directory>.value(_FakeDirectory_0(
          this,
          Invocation.method(
            #getApplicationDocumentsDirectory,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Directory>);
}

/// A class which mocks [FileSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystem extends _i1.Mock implements _i8.FileSystem {
  MockFileSystem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.FileStat> stat(String? path) => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [path],
        ),
        returnValue: _i4.Future<_i2.FileStat>.value(_FakeFileStat_1(
          this,
          Invocation.method(
            #stat,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.FileStat>);

  @override
  _i4.Future<bool> fileExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #fileExists,
          [path],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> deleteFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [path],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<bool> directoryExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #directoryExists,
          [path],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> createDirectory(
    String? path, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectory,
          [path],
          {#recursive: recursive},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Stream<_i2.FileSystemEntity> listDirectory(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectory,
          [path],
        ),
        returnValue: _i4.Stream<_i2.FileSystemEntity>.empty(),
      ) as _i4.Stream<_i2.FileSystemEntity>);

  @override
  List<_i2.FileSystemEntity> listDirectorySync(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectorySync,
          [path],
        ),
        returnValue: <_i2.FileSystemEntity>[],
      ) as List<_i2.FileSystemEntity>);

  @override
  _i4.Future<void> writeFile(
    String? path,
    _i9.Uint8List? bytes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeFile,
          [
            path,
            bytes,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [AudioDurationRetriever].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioDurationRetriever extends _i1.Mock
    implements _i10.AudioDurationRetriever {
  MockAudioDurationRetriever() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Duration> getDuration(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #getDuration,
          [filePath],
        ),
        returnValue: _i4.Future<Duration>.value(_FakeDuration_2(
          this,
          Invocation.method(
            #getDuration,
            [filePath],
          ),
        )),
      ) as _i4.Future<Duration>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i11.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);

  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);

  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);

  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);

  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);

  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);

  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);

  @override
  _i4.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
