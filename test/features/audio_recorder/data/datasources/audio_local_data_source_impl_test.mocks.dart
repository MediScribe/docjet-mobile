// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/data/datasources/audio_local_data_source_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i6;

import 'package:docjet_mobile/core/platform/file_system.dart' as _i12;
import 'package:docjet_mobile/core/platform/path_provider.dart' as _i7;
import 'package:docjet_mobile/core/platform/permission_handler.dart' as _i8;
import 'package:docjet_mobile/features/audio_recorder/data/services/audio_concatenation_service.dart'
    as _i10;
import 'package:docjet_mobile/features/audio_recorder/data/services/audio_duration_retriever.dart'
    as _i16;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/local_job.dart'
    as _i14;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/transcription_status.dart'
    as _i15;
import 'package:docjet_mobile/features/audio_recorder/domain/repositories/local_job_store.dart'
    as _i13;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:permission_handler/permission_handler.dart' as _i9;
import 'package:record/src/record.dart' as _i4;
import 'package:record_platform_interface/record_platform_interface.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAmplitude_0 extends _i1.SmartFake implements _i2.Amplitude {
  _FakeAmplitude_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_1 extends _i1.SmartFake implements _i3.Directory {
  _FakeDirectory_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_2 extends _i1.SmartFake implements _i3.FileStat {
  _FakeFileStat_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_3 extends _i1.SmartFake implements Duration {
  _FakeDuration_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioRecorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecorder extends _i1.Mock implements _i4.AudioRecorder {
  MockAudioRecorder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> start(
    _i2.RecordConfig? config, {
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [config],
          {#path: path},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i5.Stream<_i6.Uint8List>> startStream(_i2.RecordConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #startStream,
          [config],
        ),
        returnValue: _i5.Future<_i5.Stream<_i6.Uint8List>>.value(
            _i5.Stream<_i6.Uint8List>.empty()),
      ) as _i5.Future<_i5.Stream<_i6.Uint8List>>);

  @override
  _i5.Future<String?> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i5.Future<String?>.value(),
      ) as _i5.Future<String?>);

  @override
  _i5.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isRecording() => (super.noSuchMethod(
        Invocation.method(
          #isRecording,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isPaused() => (super.noSuchMethod(
        Invocation.method(
          #isPaused,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<List<_i2.InputDevice>> listInputDevices() => (super.noSuchMethod(
        Invocation.method(
          #listInputDevices,
          [],
        ),
        returnValue:
            _i5.Future<List<_i2.InputDevice>>.value(<_i2.InputDevice>[]),
      ) as _i5.Future<List<_i2.InputDevice>>);

  @override
  _i5.Future<_i2.Amplitude> getAmplitude() => (super.noSuchMethod(
        Invocation.method(
          #getAmplitude,
          [],
        ),
        returnValue: _i5.Future<_i2.Amplitude>.value(_FakeAmplitude_0(
          this,
          Invocation.method(
            #getAmplitude,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Amplitude>);

  @override
  _i5.Future<bool> isEncoderSupported(_i2.AudioEncoder? encoder) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEncoderSupported,
          [encoder],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i2.RecordState> onStateChanged() => (super.noSuchMethod(
        Invocation.method(
          #onStateChanged,
          [],
        ),
        returnValue: _i5.Stream<_i2.RecordState>.empty(),
      ) as _i5.Stream<_i2.RecordState>);

  @override
  _i5.Stream<_i2.Amplitude> onAmplitudeChanged(Duration? interval) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAmplitudeChanged,
          [interval],
        ),
        returnValue: _i5.Stream<_i2.Amplitude>.empty(),
      ) as _i5.Stream<_i2.Amplitude>);

  @override
  List<int> convertBytesToInt16(
    _i6.Uint8List? bytes, [
    dynamic endian = _i6.Endian.little,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertBytesToInt16,
          [
            bytes,
            endian,
          ],
        ),
        returnValue: <int>[],
      ) as List<int>);
}

/// A class which mocks [PathProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProvider extends _i1.Mock implements _i7.PathProvider {
  MockPathProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Directory> getApplicationDocumentsDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationDocumentsDirectory,
          [],
        ),
        returnValue: _i5.Future<_i3.Directory>.value(_FakeDirectory_1(
          this,
          Invocation.method(
            #getApplicationDocumentsDirectory,
            [],
          ),
        )),
      ) as _i5.Future<_i3.Directory>);
}

/// A class which mocks [PermissionHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandler extends _i1.Mock implements _i8.PermissionHandler {
  MockPermissionHandler() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<Map<_i9.Permission, _i9.PermissionStatus>> request(
          List<_i9.Permission>? permissions) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [permissions],
        ),
        returnValue:
            _i5.Future<Map<_i9.Permission, _i9.PermissionStatus>>.value(
                <_i9.Permission, _i9.PermissionStatus>{}),
      ) as _i5.Future<Map<_i9.Permission, _i9.PermissionStatus>>);

  @override
  _i5.Future<_i9.PermissionStatus> status(_i9.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #status,
          [permission],
        ),
        returnValue:
            _i5.Future<_i9.PermissionStatus>.value(_i9.PermissionStatus.denied),
      ) as _i5.Future<_i9.PermissionStatus>);

  @override
  _i5.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}

/// A class which mocks [AudioConcatenationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioConcatenationService extends _i1.Mock
    implements _i10.AudioConcatenationService {
  MockAudioConcatenationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> concatenate(List<String>? inputFilePaths) =>
      (super.noSuchMethod(
        Invocation.method(
          #concatenate,
          [inputFilePaths],
        ),
        returnValue: _i5.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #concatenate,
            [inputFilePaths],
          ),
        )),
      ) as _i5.Future<String>);
}

/// A class which mocks [FileSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystem extends _i1.Mock implements _i12.FileSystem {
  MockFileSystem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.FileStat> stat(String? path) => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [path],
        ),
        returnValue: _i5.Future<_i3.FileStat>.value(_FakeFileStat_2(
          this,
          Invocation.method(
            #stat,
            [path],
          ),
        )),
      ) as _i5.Future<_i3.FileStat>);

  @override
  _i5.Future<bool> fileExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #fileExists,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> deleteFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [path],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> directoryExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #directoryExists,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> createDirectory(
    String? path, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectory,
          [path],
          {#recursive: recursive},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i3.FileSystemEntity> listDirectory(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectory,
          [path],
        ),
        returnValue: _i5.Stream<_i3.FileSystemEntity>.empty(),
      ) as _i5.Stream<_i3.FileSystemEntity>);

  @override
  List<_i3.FileSystemEntity> listDirectorySync(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectorySync,
          [path],
        ),
        returnValue: <_i3.FileSystemEntity>[],
      ) as List<_i3.FileSystemEntity>);
}

/// A class which mocks [LocalJobStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalJobStore extends _i1.Mock implements _i13.LocalJobStore {
  MockLocalJobStore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<void> saveJob(_i14.LocalJob? job) => (super.noSuchMethod(
        Invocation.method(
          #saveJob,
          [job],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i14.LocalJob?> getJob(String? localFilePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJob,
          [localFilePath],
        ),
        returnValue: _i5.Future<_i14.LocalJob?>.value(),
      ) as _i5.Future<_i14.LocalJob?>);

  @override
  _i5.Future<List<_i14.LocalJob>> getOfflineJobs() => (super.noSuchMethod(
        Invocation.method(
          #getOfflineJobs,
          [],
        ),
        returnValue: _i5.Future<List<_i14.LocalJob>>.value(<_i14.LocalJob>[]),
      ) as _i5.Future<List<_i14.LocalJob>>);

  @override
  _i5.Future<List<_i14.LocalJob>> getAllLocalJobs() => (super.noSuchMethod(
        Invocation.method(
          #getAllLocalJobs,
          [],
        ),
        returnValue: _i5.Future<List<_i14.LocalJob>>.value(<_i14.LocalJob>[]),
      ) as _i5.Future<List<_i14.LocalJob>>);

  @override
  _i5.Future<void> updateJobStatus(
    String? localFilePath,
    _i15.TranscriptionStatus? status, {
    String? backendId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJobStatus,
          [
            localFilePath,
            status,
          ],
          {#backendId: backendId},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteJob(String? localFilePath) => (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [localFilePath],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [AudioDurationRetriever].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioDurationRetriever extends _i1.Mock
    implements _i16.AudioDurationRetriever {
  MockAudioDurationRetriever() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<Duration> getDuration(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #getDuration,
          [filePath],
        ),
        returnValue: _i5.Future<Duration>.value(_FakeDuration_3(
          this,
          Invocation.method(
            #getDuration,
            [filePath],
          ),
        )),
      ) as _i5.Future<Duration>);
}
