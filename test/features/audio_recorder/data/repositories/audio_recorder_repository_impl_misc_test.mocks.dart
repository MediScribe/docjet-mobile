// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/data/repositories/audio_recorder_repository_impl_misc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:io' as _i5;
import 'dart:typed_data' as _i18;

import 'package:dartz/dartz.dart' as _i3;
import 'package:docjet_mobile/core/error/failures.dart' as _i14;
import 'package:docjet_mobile/core/platform/file_system.dart' as _i19;
import 'package:docjet_mobile/core/platform/path_provider.dart' as _i20;
import 'package:docjet_mobile/core/platform/permission_handler.dart' as _i21;
import 'package:docjet_mobile/features/audio_recorder/data/datasources/audio_local_data_source.dart'
    as _i6;
import 'package:docjet_mobile/features/audio_recorder/data/services/audio_concatenation_service.dart'
    as _i23;
import 'package:docjet_mobile/features/audio_recorder/data/services/audio_file_manager.dart'
    as _i9;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/audio_record.dart'
    as _i2;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/local_job.dart'
    as _i11;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/transcription.dart'
    as _i15;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/transcription_status.dart'
    as _i12;
import 'package:docjet_mobile/features/audio_recorder/domain/repositories/local_job_store.dart'
    as _i10;
import 'package:docjet_mobile/features/audio_recorder/domain/repositories/transcription_remote_data_source.dart'
    as _i13;
import 'package:docjet_mobile/features/audio_recorder/domain/services/transcription_merge_service.dart'
    as _i16;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:permission_handler/permission_handler.dart' as _i22;
import 'package:record/src/record.dart' as _i17;
import 'package:record_platform_interface/record_platform_interface.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioRecord_0 extends _i1.SmartFake implements _i2.AudioRecord {
  _FakeAudioRecord_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAmplitude_2 extends _i1.SmartFake implements _i4.Amplitude {
  _FakeAmplitude_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_3 extends _i1.SmartFake implements _i5.FileStat {
  _FakeFileStat_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_4 extends _i1.SmartFake implements _i5.Directory {
  _FakeDirectory_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_5 extends _i1.SmartFake implements Uri {
  _FakeUri_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_6 extends _i1.SmartFake
    implements _i5.FileSystemEntity {
  _FakeFileSystemEntity_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_7 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioLocalDataSource extends _i1.Mock
    implements _i6.AudioLocalDataSource {
  @override
  _i7.Future<bool> checkPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkPermission,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> requestPermission() => (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<String> startRecording() => (super.noSuchMethod(
        Invocation.method(
          #startRecording,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #startRecording,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #startRecording,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<String> stopRecording({required String? recordingPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopRecording,
          [],
          {#recordingPath: recordingPath},
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #stopRecording,
            [],
            {#recordingPath: recordingPath},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #stopRecording,
            [],
            {#recordingPath: recordingPath},
          ),
        )),
      ) as _i7.Future<String>);

  @override
  _i7.Future<void> pauseRecording({required String? recordingPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #pauseRecording,
          [],
          {#recordingPath: recordingPath},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resumeRecording({required String? recordingPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #resumeRecording,
          [],
          {#recordingPath: recordingPath},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<String> concatenateRecordings(List<String>? inputFilePaths) =>
      (super.noSuchMethod(
        Invocation.method(
          #concatenateRecordings,
          [inputFilePaths],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #concatenateRecordings,
            [inputFilePaths],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #concatenateRecordings,
            [inputFilePaths],
          ),
        )),
      ) as _i7.Future<String>);
}

/// A class which mocks [AudioFileManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioFileManager extends _i1.Mock implements _i9.AudioFileManager {
  @override
  _i7.Future<List<String>> listRecordingPaths() => (super.noSuchMethod(
        Invocation.method(
          #listRecordingPaths,
          [],
        ),
        returnValue: _i7.Future<List<String>>.value(<String>[]),
        returnValueForMissingStub: _i7.Future<List<String>>.value(<String>[]),
      ) as _i7.Future<List<String>>);

  @override
  _i7.Future<void> deleteRecording(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecording,
          [filePath],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i2.AudioRecord> getRecordingDetails(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRecordingDetails,
          [filePath],
        ),
        returnValue: _i7.Future<_i2.AudioRecord>.value(_FakeAudioRecord_0(
          this,
          Invocation.method(
            #getRecordingDetails,
            [filePath],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i2.AudioRecord>.value(_FakeAudioRecord_0(
          this,
          Invocation.method(
            #getRecordingDetails,
            [filePath],
          ),
        )),
      ) as _i7.Future<_i2.AudioRecord>);
}

/// A class which mocks [LocalJobStore].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalJobStore extends _i1.Mock implements _i10.LocalJobStore {
  @override
  _i7.Future<void> saveJob(_i11.LocalJob? job) => (super.noSuchMethod(
        Invocation.method(
          #saveJob,
          [job],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i11.LocalJob?> getJob(String? localFilePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJob,
          [localFilePath],
        ),
        returnValue: _i7.Future<_i11.LocalJob?>.value(),
        returnValueForMissingStub: _i7.Future<_i11.LocalJob?>.value(),
      ) as _i7.Future<_i11.LocalJob?>);

  @override
  _i7.Future<List<_i11.LocalJob>> getOfflineJobs() => (super.noSuchMethod(
        Invocation.method(
          #getOfflineJobs,
          [],
        ),
        returnValue: _i7.Future<List<_i11.LocalJob>>.value(<_i11.LocalJob>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i11.LocalJob>>.value(<_i11.LocalJob>[]),
      ) as _i7.Future<List<_i11.LocalJob>>);

  @override
  _i7.Future<List<_i11.LocalJob>> getAllLocalJobs() => (super.noSuchMethod(
        Invocation.method(
          #getAllLocalJobs,
          [],
        ),
        returnValue: _i7.Future<List<_i11.LocalJob>>.value(<_i11.LocalJob>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i11.LocalJob>>.value(<_i11.LocalJob>[]),
      ) as _i7.Future<List<_i11.LocalJob>>);

  @override
  _i7.Future<void> updateJobStatus(
    String? localFilePath,
    _i12.TranscriptionStatus? status, {
    String? backendId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJobStatus,
          [
            localFilePath,
            status,
          ],
          {#backendId: backendId},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> deleteJob(String? localFilePath) => (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [localFilePath],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [TranscriptionRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranscriptionRemoteDataSource extends _i1.Mock
    implements _i13.TranscriptionRemoteDataSource {
  @override
  _i7.Future<_i3.Either<_i14.ApiFailure, List<_i15.Transcription>>>
      getUserJobs() => (super.noSuchMethod(
            Invocation.method(
              #getUserJobs,
              [],
            ),
            returnValue: _i7.Future<
                    _i3
                    .Either<_i14.ApiFailure, List<_i15.Transcription>>>.value(
                _FakeEither_1<_i14.ApiFailure, List<_i15.Transcription>>(
              this,
              Invocation.method(
                #getUserJobs,
                [],
              ),
            )),
            returnValueForMissingStub: _i7.Future<
                    _i3
                    .Either<_i14.ApiFailure, List<_i15.Transcription>>>.value(
                _FakeEither_1<_i14.ApiFailure, List<_i15.Transcription>>(
              this,
              Invocation.method(
                #getUserJobs,
                [],
              ),
            )),
          ) as _i7
              .Future<_i3.Either<_i14.ApiFailure, List<_i15.Transcription>>>);

  @override
  _i7.Future<
      _i3.Either<_i14.ApiFailure, _i15.Transcription>> getTranscriptionJob(
          String? backendId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTranscriptionJob,
          [backendId],
        ),
        returnValue:
            _i7.Future<_i3.Either<_i14.ApiFailure, _i15.Transcription>>.value(
                _FakeEither_1<_i14.ApiFailure, _i15.Transcription>(
          this,
          Invocation.method(
            #getTranscriptionJob,
            [backendId],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i14.ApiFailure, _i15.Transcription>>.value(
                _FakeEither_1<_i14.ApiFailure, _i15.Transcription>(
          this,
          Invocation.method(
            #getTranscriptionJob,
            [backendId],
          ),
        )),
      ) as _i7.Future<_i3.Either<_i14.ApiFailure, _i15.Transcription>>);

  @override
  _i7.Future<
      _i3.Either<_i14.ApiFailure, _i15.Transcription>> uploadForTranscription({
    required String? localFilePath,
    required String? userId,
    String? text,
    String? additionalText,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadForTranscription,
          [],
          {
            #localFilePath: localFilePath,
            #userId: userId,
            #text: text,
            #additionalText: additionalText,
          },
        ),
        returnValue:
            _i7.Future<_i3.Either<_i14.ApiFailure, _i15.Transcription>>.value(
                _FakeEither_1<_i14.ApiFailure, _i15.Transcription>(
          this,
          Invocation.method(
            #uploadForTranscription,
            [],
            {
              #localFilePath: localFilePath,
              #userId: userId,
              #text: text,
              #additionalText: additionalText,
            },
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i3.Either<_i14.ApiFailure, _i15.Transcription>>.value(
                _FakeEither_1<_i14.ApiFailure, _i15.Transcription>(
          this,
          Invocation.method(
            #uploadForTranscription,
            [],
            {
              #localFilePath: localFilePath,
              #userId: userId,
              #text: text,
              #additionalText: additionalText,
            },
          ),
        )),
      ) as _i7.Future<_i3.Either<_i14.ApiFailure, _i15.Transcription>>);
}

/// A class which mocks [TranscriptionMergeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranscriptionMergeService extends _i1.Mock
    implements _i16.TranscriptionMergeService {
  @override
  List<_i15.Transcription> mergeJobs(
    List<_i15.Transcription>? remoteJobs,
    List<_i11.LocalJob>? localJobs,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #mergeJobs,
          [
            remoteJobs,
            localJobs,
          ],
        ),
        returnValue: <_i15.Transcription>[],
        returnValueForMissingStub: <_i15.Transcription>[],
      ) as List<_i15.Transcription>);
}

/// A class which mocks [AudioRecorder].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecorder extends _i1.Mock implements _i17.AudioRecorder {
  @override
  _i7.Future<void> start(
    _i4.RecordConfig? config, {
    required String? path,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #start,
          [config],
          {#path: path},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<_i7.Stream<_i18.Uint8List>> startStream(
          _i4.RecordConfig? config) =>
      (super.noSuchMethod(
        Invocation.method(
          #startStream,
          [config],
        ),
        returnValue: _i7.Future<_i7.Stream<_i18.Uint8List>>.value(
            _i7.Stream<_i18.Uint8List>.empty()),
        returnValueForMissingStub: _i7.Future<_i7.Stream<_i18.Uint8List>>.value(
            _i7.Stream<_i18.Uint8List>.empty()),
      ) as _i7.Future<_i7.Stream<_i18.Uint8List>>);

  @override
  _i7.Future<String?> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i7.Future<String?>.value(),
        returnValueForMissingStub: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);

  @override
  _i7.Future<void> cancel() => (super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> isRecording() => (super.noSuchMethod(
        Invocation.method(
          #isRecording,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> isPaused() => (super.noSuchMethod(
        Invocation.method(
          #isPaused,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<bool> hasPermission() => (super.noSuchMethod(
        Invocation.method(
          #hasPermission,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<List<_i4.InputDevice>> listInputDevices() => (super.noSuchMethod(
        Invocation.method(
          #listInputDevices,
          [],
        ),
        returnValue:
            _i7.Future<List<_i4.InputDevice>>.value(<_i4.InputDevice>[]),
        returnValueForMissingStub:
            _i7.Future<List<_i4.InputDevice>>.value(<_i4.InputDevice>[]),
      ) as _i7.Future<List<_i4.InputDevice>>);

  @override
  _i7.Future<_i4.Amplitude> getAmplitude() => (super.noSuchMethod(
        Invocation.method(
          #getAmplitude,
          [],
        ),
        returnValue: _i7.Future<_i4.Amplitude>.value(_FakeAmplitude_2(
          this,
          Invocation.method(
            #getAmplitude,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i4.Amplitude>.value(_FakeAmplitude_2(
          this,
          Invocation.method(
            #getAmplitude,
            [],
          ),
        )),
      ) as _i7.Future<_i4.Amplitude>);

  @override
  _i7.Future<bool> isEncoderSupported(_i4.AudioEncoder? encoder) =>
      (super.noSuchMethod(
        Invocation.method(
          #isEncoderSupported,
          [encoder],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Stream<_i4.RecordState> onStateChanged() => (super.noSuchMethod(
        Invocation.method(
          #onStateChanged,
          [],
        ),
        returnValue: _i7.Stream<_i4.RecordState>.empty(),
        returnValueForMissingStub: _i7.Stream<_i4.RecordState>.empty(),
      ) as _i7.Stream<_i4.RecordState>);

  @override
  _i7.Stream<_i4.Amplitude> onAmplitudeChanged(Duration? interval) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAmplitudeChanged,
          [interval],
        ),
        returnValue: _i7.Stream<_i4.Amplitude>.empty(),
        returnValueForMissingStub: _i7.Stream<_i4.Amplitude>.empty(),
      ) as _i7.Stream<_i4.Amplitude>);

  @override
  List<int> convertBytesToInt16(
    _i18.Uint8List? bytes, [
    dynamic endian = _i18.Endian.little,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #convertBytesToInt16,
          [
            bytes,
            endian,
          ],
        ),
        returnValue: <int>[],
        returnValueForMissingStub: <int>[],
      ) as List<int>);
}

/// A class which mocks [FileSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystem extends _i1.Mock implements _i19.FileSystem {
  @override
  _i7.Future<_i5.FileStat> stat(String? path) => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [path],
        ),
        returnValue: _i7.Future<_i5.FileStat>.value(_FakeFileStat_3(
          this,
          Invocation.method(
            #stat,
            [path],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileStat>.value(_FakeFileStat_3(
          this,
          Invocation.method(
            #stat,
            [path],
          ),
        )),
      ) as _i7.Future<_i5.FileStat>);

  @override
  _i7.Future<bool> fileExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #fileExists,
          [path],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> deleteFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [path],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<bool> directoryExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #directoryExists,
          [path],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  _i7.Future<void> createDirectory(
    String? path, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectory,
          [path],
          {#recursive: recursive},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Stream<_i5.FileSystemEntity> listDirectory(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectory,
          [path],
        ),
        returnValue: _i7.Stream<_i5.FileSystemEntity>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.FileSystemEntity>.empty(),
      ) as _i7.Stream<_i5.FileSystemEntity>);

  @override
  List<_i5.FileSystemEntity> listDirectorySync(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectorySync,
          [path],
        ),
        returnValue: <_i5.FileSystemEntity>[],
        returnValueForMissingStub: <_i5.FileSystemEntity>[],
      ) as List<_i5.FileSystemEntity>);

  @override
  _i7.Future<void> writeFile(
    String? path,
    _i18.Uint8List? bytes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeFile,
          [
            path,
            bytes,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [PathProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProvider extends _i1.Mock implements _i20.PathProvider {
  @override
  _i7.Future<_i5.Directory> getApplicationDocumentsDirectory() =>
      (super.noSuchMethod(
        Invocation.method(
          #getApplicationDocumentsDirectory,
          [],
        ),
        returnValue: _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #getApplicationDocumentsDirectory,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #getApplicationDocumentsDirectory,
            [],
          ),
        )),
      ) as _i7.Future<_i5.Directory>);
}

/// A class which mocks [PermissionHandler].
///
/// See the documentation for Mockito's code generation for more information.
class MockPermissionHandler extends _i1.Mock implements _i21.PermissionHandler {
  @override
  _i7.Future<Map<_i22.Permission, _i22.PermissionStatus>> request(
          List<_i22.Permission>? permissions) =>
      (super.noSuchMethod(
        Invocation.method(
          #request,
          [permissions],
        ),
        returnValue:
            _i7.Future<Map<_i22.Permission, _i22.PermissionStatus>>.value(
                <_i22.Permission, _i22.PermissionStatus>{}),
        returnValueForMissingStub:
            _i7.Future<Map<_i22.Permission, _i22.PermissionStatus>>.value(
                <_i22.Permission, _i22.PermissionStatus>{}),
      ) as _i7.Future<Map<_i22.Permission, _i22.PermissionStatus>>);

  @override
  _i7.Future<_i22.PermissionStatus> status(_i22.Permission? permission) =>
      (super.noSuchMethod(
        Invocation.method(
          #status,
          [permission],
        ),
        returnValue: _i7.Future<_i22.PermissionStatus>.value(
            _i22.PermissionStatus.denied),
        returnValueForMissingStub: _i7.Future<_i22.PermissionStatus>.value(
            _i22.PermissionStatus.denied),
      ) as _i7.Future<_i22.PermissionStatus>);

  @override
  _i7.Future<bool> openAppSettings() => (super.noSuchMethod(
        Invocation.method(
          #openAppSettings,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
}

/// A class which mocks [AudioConcatenationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioConcatenationService extends _i1.Mock
    implements _i23.AudioConcatenationService {
  @override
  _i7.Future<String> concatenate(List<String>? inputFilePaths) =>
      (super.noSuchMethod(
        Invocation.method(
          #concatenate,
          [inputFilePaths],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #concatenate,
            [inputFilePaths],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #concatenate,
            [inputFilePaths],
          ),
        )),
      ) as _i7.Future<String>);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i5.Directory {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_5(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_5(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  _i5.Directory get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeDirectory_4(
          this,
          Invocation.getter(#absolute),
        ),
        returnValueForMissingStub: _FakeDirectory_4(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i5.Directory);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_4(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeDirectory_4(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i5.Directory);

  @override
  _i7.Future<_i5.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#recursive: recursive},
        ),
        returnValue: _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #create,
            [],
            {#recursive: recursive},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #create,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i7.Future<_i5.Directory>);

  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i5.Directory> createTemp([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTemp,
          [prefix],
        ),
        returnValue: _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #createTemp,
            [prefix],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #createTemp,
            [prefix],
          ),
        )),
      ) as _i7.Future<_i5.Directory>);

  @override
  _i5.Directory createTempSync([String? prefix]) => (super.noSuchMethod(
        Invocation.method(
          #createTempSync,
          [prefix],
        ),
        returnValue: _FakeDirectory_4(
          this,
          Invocation.method(
            #createTempSync,
            [prefix],
          ),
        ),
        returnValueForMissingStub: _FakeDirectory_4(
          this,
          Invocation.method(
            #createTempSync,
            [prefix],
          ),
        ),
      ) as _i5.Directory);

  @override
  _i7.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i7.Future<_i5.Directory> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.Directory>.value(_FakeDirectory_4(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i7.Future<_i5.Directory>);

  @override
  _i5.Directory renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeDirectory_4(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeDirectory_4(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i5.Directory);

  @override
  _i7.Future<_i5.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i7.Future<_i5.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<_i5.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #list,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: _i7.Stream<_i5.FileSystemEntity>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.FileSystemEntity>.empty(),
      ) as _i7.Stream<_i5.FileSystemEntity>);

  @override
  List<_i5.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listSync,
          [],
          {
            #recursive: recursive,
            #followLinks: followLinks,
          },
        ),
        returnValue: <_i5.FileSystemEntity>[],
        returnValueForMissingStub: <_i5.FileSystemEntity>[],
      ) as List<_i5.FileSystemEntity>);

  @override
  _i7.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<_i5.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i7.Future<_i5.FileStat>.value(_FakeFileStat_3(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileStat>.value(_FakeFileStat_3(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i7.Future<_i5.FileStat>);

  @override
  _i5.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_3(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFileStat_3(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i5.FileStat);

  @override
  _i7.Stream<_i5.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i7.Stream<_i5.FileSystemEvent>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.FileSystemEvent>.empty(),
      ) as _i7.Stream<_i5.FileSystemEvent>);
}

/// A class which mocks [FileStat].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileStat extends _i1.Mock implements _i5.FileStat {
  @override
  DateTime get changed => (super.noSuchMethod(
        Invocation.getter(#changed),
        returnValue: _FakeDateTime_7(
          this,
          Invocation.getter(#changed),
        ),
        returnValueForMissingStub: _FakeDateTime_7(
          this,
          Invocation.getter(#changed),
        ),
      ) as DateTime);

  @override
  DateTime get modified => (super.noSuchMethod(
        Invocation.getter(#modified),
        returnValue: _FakeDateTime_7(
          this,
          Invocation.getter(#modified),
        ),
        returnValueForMissingStub: _FakeDateTime_7(
          this,
          Invocation.getter(#modified),
        ),
      ) as DateTime);

  @override
  DateTime get accessed => (super.noSuchMethod(
        Invocation.getter(#accessed),
        returnValue: _FakeDateTime_7(
          this,
          Invocation.getter(#accessed),
        ),
        returnValueForMissingStub: _FakeDateTime_7(
          this,
          Invocation.getter(#accessed),
        ),
      ) as DateTime);

  @override
  _i5.FileSystemEntityType get type => (super.noSuchMethod(
        Invocation.getter(#type),
        returnValue: _i8.dummyValue<_i5.FileSystemEntityType>(
          this,
          Invocation.getter(#type),
        ),
        returnValueForMissingStub: _i8.dummyValue<_i5.FileSystemEntityType>(
          this,
          Invocation.getter(#type),
        ),
      ) as _i5.FileSystemEntityType);

  @override
  int get mode => (super.noSuchMethod(
        Invocation.getter(#mode),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  int get size => (super.noSuchMethod(
        Invocation.getter(#size),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);

  @override
  String modeString() => (super.noSuchMethod(
        Invocation.method(
          #modeString,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #modeString,
            [],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #modeString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [FileSystemEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystemEntity extends _i1.Mock implements _i5.FileSystemEntity {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_5(
          this,
          Invocation.getter(#uri),
        ),
        returnValueForMissingStub: _FakeUri_5(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i5.FileSystemEntity get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFileSystemEntity_6(
          this,
          Invocation.getter(#absolute),
        ),
        returnValueForMissingStub: _FakeFileSystemEntity_6(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i5.FileSystemEntity);

  @override
  _i5.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_4(
          this,
          Invocation.getter(#parent),
        ),
        returnValueForMissingStub: _FakeDirectory_4(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i5.Directory);

  @override
  _i7.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i7.Future<bool>.value(false),
        returnValueForMissingStub: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<_i5.FileSystemEntity> rename(String? newPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i7.Future<_i5.FileSystemEntity>);

  @override
  _i5.FileSystemEntity renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
        returnValueForMissingStub: _FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i5.FileSystemEntity);

  @override
  _i7.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i7.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i7.Future<_i5.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i7.Future<_i5.FileStat>.value(_FakeFileStat_3(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileStat>.value(_FakeFileStat_3(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i7.Future<_i5.FileStat>);

  @override
  _i5.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_3(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeFileStat_3(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i5.FileStat);

  @override
  _i7.Future<_i5.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_6(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i7.Future<_i5.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<_i5.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i7.Stream<_i5.FileSystemEvent>.empty(),
        returnValueForMissingStub: _i7.Stream<_i5.FileSystemEvent>.empty(),
      ) as _i7.Stream<_i5.FileSystemEvent>);
}
