// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/data/repositories/audio_recorder_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:docjet_mobile/features/audio_recorder/data/datasources/audio_local_data_source.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AudioLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioLocalDataSource extends _i1.Mock
    implements _i2.AudioLocalDataSource {
  MockAudioLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<bool> checkPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkPermission, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<bool> requestPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, []),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<String> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#startRecording, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<String> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#stopRecording, []),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<void> pauseRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecording, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> resumeRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecording, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> deleteRecording(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRecording, [filePath]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<String> concatenateRecordings(
    String? originalFilePath,
    String? newSegmentPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#concatenateRecordings, [
              originalFilePath,
              newSegmentPath,
            ]),
            returnValue: _i3.Future<String>.value(
              _i4.dummyValue<String>(
                this,
                Invocation.method(#concatenateRecordings, [
                  originalFilePath,
                  newSegmentPath,
                ]),
              ),
            ),
          )
          as _i3.Future<String>);

  @override
  _i3.Future<Duration> getAudioDuration(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#getAudioDuration, [filePath]),
            returnValue: _i3.Future<Duration>.value(
              _FakeDuration_0(
                this,
                Invocation.method(#getAudioDuration, [filePath]),
              ),
            ),
          )
          as _i3.Future<Duration>);

  @override
  _i3.Future<List<String>> listRecordingFiles() =>
      (super.noSuchMethod(
            Invocation.method(#listRecordingFiles, []),
            returnValue: _i3.Future<List<String>>.value(<String>[]),
          )
          as _i3.Future<List<String>>);
}
