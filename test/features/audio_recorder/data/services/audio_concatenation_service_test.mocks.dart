// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/data/services/audio_concatenation_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i2;

import 'package:docjet_mobile/core/platform/file_system.dart' as _i3;
import 'package:docjet_mobile/core/platform/path_provider.dart' as _i5;
import 'package:ffmpeg_kit_flutter_audio/ffmpeg_session.dart' as _i7;
import 'package:ffmpeg_kit_flutter_audio/log.dart' as _i9;
import 'package:ffmpeg_kit_flutter_audio/return_code.dart' as _i11;
import 'package:ffmpeg_kit_flutter_audio/session_state.dart' as _i10;
import 'package:ffmpeg_kit_flutter_audio/statistics.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFileStat_0 extends _i1.SmartFake implements _i2.FileStat {
  _FakeFileStat_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeDirectory_1 extends _i1.SmartFake implements _i2.Directory {
  _FakeDirectory_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUri_2 extends _i1.SmartFake implements Uri {
  _FakeUri_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFileSystemEntity_3 extends _i1.SmartFake
    implements _i2.FileSystemEntity {
  _FakeFileSystemEntity_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FileSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystem extends _i1.Mock implements _i3.FileSystem {
  @override
  _i4.Future<_i2.FileStat> stat(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#stat, [path]),
            returnValue: _i4.Future<_i2.FileStat>.value(
              _FakeFileStat_0(this, Invocation.method(#stat, [path])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.FileStat>.value(
              _FakeFileStat_0(this, Invocation.method(#stat, [path])),
            ),
          )
          as _i4.Future<_i2.FileStat>);

  @override
  _i4.Future<bool> fileExists(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#fileExists, [path]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> deleteFile(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#deleteFile, [path]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> directoryExists(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#directoryExists, [path]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> createDirectory(String? path, {bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(
              #createDirectory,
              [path],
              {#recursive: recursive},
            ),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Stream<_i2.FileSystemEntity> listDirectory(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#listDirectory, [path]),
            returnValue: _i4.Stream<_i2.FileSystemEntity>.empty(),
            returnValueForMissingStub: _i4.Stream<_i2.FileSystemEntity>.empty(),
          )
          as _i4.Stream<_i2.FileSystemEntity>);

  @override
  List<_i2.FileSystemEntity> listDirectorySync(String? path) =>
      (super.noSuchMethod(
            Invocation.method(#listDirectorySync, [path]),
            returnValue: <_i2.FileSystemEntity>[],
            returnValueForMissingStub: <_i2.FileSystemEntity>[],
          )
          as List<_i2.FileSystemEntity>);
}

/// A class which mocks [PathProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathProvider extends _i1.Mock implements _i5.PathProvider {
  @override
  _i4.Future<_i2.Directory> getApplicationDocumentsDirectory() =>
      (super.noSuchMethod(
            Invocation.method(#getApplicationDocumentsDirectory, []),
            returnValue: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(
                this,
                Invocation.method(#getApplicationDocumentsDirectory, []),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(
                this,
                Invocation.method(#getApplicationDocumentsDirectory, []),
              ),
            ),
          )
          as _i4.Future<_i2.Directory>);
}

/// A class which mocks [Directory].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectory extends _i1.Mock implements _i2.Directory {
  @override
  String get path =>
      (super.noSuchMethod(
            Invocation.getter(#path),
            returnValue: _i6.dummyValue<String>(this, Invocation.getter(#path)),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.getter(#path),
            ),
          )
          as String);

  @override
  Uri get uri =>
      (super.noSuchMethod(
            Invocation.getter(#uri),
            returnValue: _FakeUri_2(this, Invocation.getter(#uri)),
            returnValueForMissingStub: _FakeUri_2(
              this,
              Invocation.getter(#uri),
            ),
          )
          as Uri);

  @override
  _i2.Directory get absolute =>
      (super.noSuchMethod(
            Invocation.getter(#absolute),
            returnValue: _FakeDirectory_1(this, Invocation.getter(#absolute)),
            returnValueForMissingStub: _FakeDirectory_1(
              this,
              Invocation.getter(#absolute),
            ),
          )
          as _i2.Directory);

  @override
  bool get isAbsolute =>
      (super.noSuchMethod(
            Invocation.getter(#isAbsolute),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Directory get parent =>
      (super.noSuchMethod(
            Invocation.getter(#parent),
            returnValue: _FakeDirectory_1(this, Invocation.getter(#parent)),
            returnValueForMissingStub: _FakeDirectory_1(
              this,
              Invocation.getter(#parent),
            ),
          )
          as _i2.Directory);

  @override
  _i4.Future<_i2.Directory> create({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#create, [], {#recursive: recursive}),
            returnValue: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(
                this,
                Invocation.method(#create, [], {#recursive: recursive}),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(
                this,
                Invocation.method(#create, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i4.Future<_i2.Directory>);

  @override
  void createSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#createSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.Directory> createTemp([String? prefix]) =>
      (super.noSuchMethod(
            Invocation.method(#createTemp, [prefix]),
            returnValue: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(this, Invocation.method(#createTemp, [prefix])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(this, Invocation.method(#createTemp, [prefix])),
            ),
          )
          as _i4.Future<_i2.Directory>);

  @override
  _i2.Directory createTempSync([String? prefix]) =>
      (super.noSuchMethod(
            Invocation.method(#createTempSync, [prefix]),
            returnValue: _FakeDirectory_1(
              this,
              Invocation.method(#createTempSync, [prefix]),
            ),
            returnValueForMissingStub: _FakeDirectory_1(
              this,
              Invocation.method(#createTempSync, [prefix]),
            ),
          )
          as _i2.Directory);

  @override
  _i4.Future<String> resolveSymbolicLinks() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinks, []),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
            returnValueForMissingStub: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#resolveSymbolicLinks, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  String resolveSymbolicLinksSync() =>
      (super.noSuchMethod(
            Invocation.method(#resolveSymbolicLinksSync, []),
            returnValue: _i6.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
            returnValueForMissingStub: _i6.dummyValue<String>(
              this,
              Invocation.method(#resolveSymbolicLinksSync, []),
            ),
          )
          as String);

  @override
  _i4.Future<_i2.Directory> rename(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#rename, [newPath]),
            returnValue: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(this, Invocation.method(#rename, [newPath])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Directory>.value(
              _FakeDirectory_1(this, Invocation.method(#rename, [newPath])),
            ),
          )
          as _i4.Future<_i2.Directory>);

  @override
  _i2.Directory renameSync(String? newPath) =>
      (super.noSuchMethod(
            Invocation.method(#renameSync, [newPath]),
            returnValue: _FakeDirectory_1(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
            returnValueForMissingStub: _FakeDirectory_1(
              this,
              Invocation.method(#renameSync, [newPath]),
            ),
          )
          as _i2.Directory);

  @override
  _i4.Future<_i2.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [], {#recursive: recursive}),
            returnValue: _i4.Future<_i2.FileSystemEntity>.value(
              _FakeFileSystemEntity_3(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.FileSystemEntity>.value(
              _FakeFileSystemEntity_3(
                this,
                Invocation.method(#delete, [], {#recursive: recursive}),
              ),
            ),
          )
          as _i4.Future<_i2.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
    Invocation.method(#deleteSync, [], {#recursive: recursive}),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Stream<_i2.FileSystemEntity> list({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#list, [], {
              #recursive: recursive,
              #followLinks: followLinks,
            }),
            returnValue: _i4.Stream<_i2.FileSystemEntity>.empty(),
            returnValueForMissingStub: _i4.Stream<_i2.FileSystemEntity>.empty(),
          )
          as _i4.Stream<_i2.FileSystemEntity>);

  @override
  List<_i2.FileSystemEntity> listSync({
    bool? recursive = false,
    bool? followLinks = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#listSync, [], {
              #recursive: recursive,
              #followLinks: followLinks,
            }),
            returnValue: <_i2.FileSystemEntity>[],
            returnValueForMissingStub: <_i2.FileSystemEntity>[],
          )
          as List<_i2.FileSystemEntity>);

  @override
  _i4.Future<bool> exists() =>
      (super.noSuchMethod(
            Invocation.method(#exists, []),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  bool existsSync() =>
      (super.noSuchMethod(
            Invocation.method(#existsSync, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<_i2.FileStat> stat() =>
      (super.noSuchMethod(
            Invocation.method(#stat, []),
            returnValue: _i4.Future<_i2.FileStat>.value(
              _FakeFileStat_0(this, Invocation.method(#stat, [])),
            ),
            returnValueForMissingStub: _i4.Future<_i2.FileStat>.value(
              _FakeFileStat_0(this, Invocation.method(#stat, [])),
            ),
          )
          as _i4.Future<_i2.FileStat>);

  @override
  _i2.FileStat statSync() =>
      (super.noSuchMethod(
            Invocation.method(#statSync, []),
            returnValue: _FakeFileStat_0(
              this,
              Invocation.method(#statSync, []),
            ),
            returnValueForMissingStub: _FakeFileStat_0(
              this,
              Invocation.method(#statSync, []),
            ),
          )
          as _i2.FileStat);

  @override
  _i4.Stream<_i2.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#watch, [], {
              #events: events,
              #recursive: recursive,
            }),
            returnValue: _i4.Stream<_i2.FileSystemEvent>.empty(),
            returnValueForMissingStub: _i4.Stream<_i2.FileSystemEvent>.empty(),
          )
          as _i4.Stream<_i2.FileSystemEvent>);
}

/// A class which mocks [FFmpegSession].
///
/// See the documentation for Mockito's code generation for more information.
class MockFFmpegSession extends _i1.Mock implements _i7.FFmpegSession {
  @override
  _i4.Future<List<_i8.Statistics>> getAllStatistics([int? waitTimeout]) =>
      (super.noSuchMethod(
            Invocation.method(#getAllStatistics, [waitTimeout]),
            returnValue: _i4.Future<List<_i8.Statistics>>.value(
              <_i8.Statistics>[],
            ),
            returnValueForMissingStub: _i4.Future<List<_i8.Statistics>>.value(
              <_i8.Statistics>[],
            ),
          )
          as _i4.Future<List<_i8.Statistics>>);

  @override
  _i4.Future<List<_i8.Statistics>> getStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getStatistics, []),
            returnValue: _i4.Future<List<_i8.Statistics>>.value(
              <_i8.Statistics>[],
            ),
            returnValueForMissingStub: _i4.Future<List<_i8.Statistics>>.value(
              <_i8.Statistics>[],
            ),
          )
          as _i4.Future<List<_i8.Statistics>>);

  @override
  _i4.Future<_i8.Statistics?> getLastReceivedStatistics() =>
      (super.noSuchMethod(
            Invocation.method(#getLastReceivedStatistics, []),
            returnValue: _i4.Future<_i8.Statistics?>.value(),
            returnValueForMissingStub: _i4.Future<_i8.Statistics?>.value(),
          )
          as _i4.Future<_i8.Statistics?>);

  @override
  bool isFFmpeg() =>
      (super.noSuchMethod(
            Invocation.method(#isFFmpeg, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isFFprobe() =>
      (super.noSuchMethod(
            Invocation.method(#isFFprobe, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isMediaInformation() =>
      (super.noSuchMethod(
            Invocation.method(#isMediaInformation, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i4.Future<DateTime?> getEndTime() =>
      (super.noSuchMethod(
            Invocation.method(#getEndTime, []),
            returnValue: _i4.Future<DateTime?>.value(),
            returnValueForMissingStub: _i4.Future<DateTime?>.value(),
          )
          as _i4.Future<DateTime?>);

  @override
  _i4.Future<int> getDuration() =>
      (super.noSuchMethod(
            Invocation.method(#getDuration, []),
            returnValue: _i4.Future<int>.value(0),
            returnValueForMissingStub: _i4.Future<int>.value(0),
          )
          as _i4.Future<int>);

  @override
  _i4.Future<List<_i9.Log>> getAllLogs([int? waitTimeout = null]) =>
      (super.noSuchMethod(
            Invocation.method(#getAllLogs, [waitTimeout]),
            returnValue: _i4.Future<List<_i9.Log>>.value(<_i9.Log>[]),
            returnValueForMissingStub: _i4.Future<List<_i9.Log>>.value(
              <_i9.Log>[],
            ),
          )
          as _i4.Future<List<_i9.Log>>);

  @override
  _i4.Future<List<_i9.Log>> getLogs() =>
      (super.noSuchMethod(
            Invocation.method(#getLogs, []),
            returnValue: _i4.Future<List<_i9.Log>>.value(<_i9.Log>[]),
            returnValueForMissingStub: _i4.Future<List<_i9.Log>>.value(
              <_i9.Log>[],
            ),
          )
          as _i4.Future<List<_i9.Log>>);

  @override
  _i4.Future<String?> getAllLogsAsString([int? waitTimeout = null]) =>
      (super.noSuchMethod(
            Invocation.method(#getAllLogsAsString, [waitTimeout]),
            returnValue: _i4.Future<String?>.value(),
            returnValueForMissingStub: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<String> getLogsAsString() =>
      (super.noSuchMethod(
            Invocation.method(#getLogsAsString, []),
            returnValue: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getLogsAsString, []),
              ),
            ),
            returnValueForMissingStub: _i4.Future<String>.value(
              _i6.dummyValue<String>(
                this,
                Invocation.method(#getLogsAsString, []),
              ),
            ),
          )
          as _i4.Future<String>);

  @override
  _i4.Future<String?> getOutput() =>
      (super.noSuchMethod(
            Invocation.method(#getOutput, []),
            returnValue: _i4.Future<String?>.value(),
            returnValueForMissingStub: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<_i10.SessionState> getState() =>
      (super.noSuchMethod(
            Invocation.method(#getState, []),
            returnValue: _i4.Future<_i10.SessionState>.value(
              _i10.SessionState.created,
            ),
            returnValueForMissingStub: _i4.Future<_i10.SessionState>.value(
              _i10.SessionState.created,
            ),
          )
          as _i4.Future<_i10.SessionState>);

  @override
  _i4.Future<_i11.ReturnCode?> getReturnCode() =>
      (super.noSuchMethod(
            Invocation.method(#getReturnCode, []),
            returnValue: _i4.Future<_i11.ReturnCode?>.value(),
            returnValueForMissingStub: _i4.Future<_i11.ReturnCode?>.value(),
          )
          as _i4.Future<_i11.ReturnCode?>);

  @override
  _i4.Future<String?> getFailStackTrace() =>
      (super.noSuchMethod(
            Invocation.method(#getFailStackTrace, []),
            returnValue: _i4.Future<String?>.value(),
            returnValueForMissingStub: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<bool> thereAreAsynchronousMessagesInTransmit() =>
      (super.noSuchMethod(
            Invocation.method(#thereAreAsynchronousMessagesInTransmit, []),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> cancel() =>
      (super.noSuchMethod(
            Invocation.method(#cancel, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ReturnCode].
///
/// See the documentation for Mockito's code generation for more information.
class MockReturnCode extends _i1.Mock implements _i11.ReturnCode {
  @override
  int getValue() =>
      (super.noSuchMethod(
            Invocation.method(#getValue, []),
            returnValue: 0,
            returnValueForMissingStub: 0,
          )
          as int);

  @override
  bool isValueSuccess() =>
      (super.noSuchMethod(
            Invocation.method(#isValueSuccess, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isValueError() =>
      (super.noSuchMethod(
            Invocation.method(#isValueError, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool isValueCancel() =>
      (super.noSuchMethod(
            Invocation.method(#isValueCancel, []),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);
}
