// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/data/services/audio_playback_service_event_handling_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:docjet_mobile/features/audio_recorder/domain/adapters/audio_player_adapter.dart'
    as _i2;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/domain_player_state.dart'
    as _i4;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/playback_state.dart'
    as _i6;
import 'package:docjet_mobile/features/audio_recorder/domain/mappers/playback_state_mapper.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioPlayerAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayerAdapter extends _i1.Mock
    implements _i2.AudioPlayerAdapter {
  MockAudioPlayerAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.DomainPlayerState> get onPlayerStateChanged =>
      (super.noSuchMethod(
        Invocation.getter(#onPlayerStateChanged),
        returnValue: _i3.Stream<_i4.DomainPlayerState>.empty(),
      ) as _i3.Stream<_i4.DomainPlayerState>);

  @override
  _i3.Stream<Duration> get onDurationChanged => (super.noSuchMethod(
        Invocation.getter(#onDurationChanged),
        returnValue: _i3.Stream<Duration>.empty(),
      ) as _i3.Stream<Duration>);

  @override
  _i3.Stream<Duration> get onPositionChanged => (super.noSuchMethod(
        Invocation.getter(#onPositionChanged),
        returnValue: _i3.Stream<Duration>.empty(),
      ) as _i3.Stream<Duration>);

  @override
  _i3.Stream<void> get onPlayerComplete => (super.noSuchMethod(
        Invocation.getter(#onPlayerComplete),
        returnValue: _i3.Stream<void>.empty(),
      ) as _i3.Stream<void>);

  @override
  _i3.Future<void> setSourceUrl(String? url) => (super.noSuchMethod(
        Invocation.method(
          #setSourceUrl,
          [url],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> pause() => (super.noSuchMethod(
        Invocation.method(
          #pause,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> resume() => (super.noSuchMethod(
        Invocation.method(
          #resume,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> seek(
    String? filePath,
    Duration? position,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #seek,
          [
            filePath,
            position,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> stop() => (super.noSuchMethod(
        Invocation.method(
          #stop,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> dispose() => (super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PlaybackStateMapper].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaybackStateMapper extends _i1.Mock
    implements _i5.PlaybackStateMapper {
  MockPlaybackStateMapper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i6.PlaybackState> get playbackStateStream => (super.noSuchMethod(
        Invocation.getter(#playbackStateStream),
        returnValue: _i3.Stream<_i6.PlaybackState>.empty(),
      ) as _i3.Stream<_i6.PlaybackState>);

  @override
  void initialize({
    required _i3.Stream<Duration>? positionStream,
    required _i3.Stream<Duration>? durationStream,
    required _i3.Stream<void>? completeStream,
    required _i3.Stream<_i4.DomainPlayerState>? playerStateStream,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #initialize,
          [],
          {
            #positionStream: positionStream,
            #durationStream: durationStream,
            #completeStream: completeStream,
            #playerStateStream: playerStateStream,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
