// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/presentation/cubit/audio_recorder_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:docjet_mobile/core/error/failures.dart' as _i5;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/audio_record.dart'
    as _i6;
import 'package:docjet_mobile/features/audio_recorder/domain/repositories/audio_recorder_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [AudioRecorderRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioRecorderRepository extends _i1.Mock
    implements _i3.AudioRecorderRepository {
  MockAudioRecorderRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> checkPermission() =>
      (super.noSuchMethod(
            Invocation.method(#checkPermission, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#checkPermission, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> requestPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
              _FakeEither_0<_i5.Failure, bool>(
                this,
                Invocation.method(#requestPermission, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> startRecording() =>
      (super.noSuchMethod(
            Invocation.method(#startRecording, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#startRecording, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> stopRecording() =>
      (super.noSuchMethod(
            Invocation.method(#stopRecording, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#stopRecording, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> pauseRecording() =>
      (super.noSuchMethod(
            Invocation.method(#pauseRecording, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#pauseRecording, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> resumeRecording() =>
      (super.noSuchMethod(
            Invocation.method(#resumeRecording, []),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#resumeRecording, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> deleteRecording(String? filePath) =>
      (super.noSuchMethod(
            Invocation.method(#deleteRecording, [filePath]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
              _FakeEither_0<_i5.Failure, void>(
                this,
                Invocation.method(#deleteRecording, [filePath]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> appendToRecording(
    String? segmentPath,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#appendToRecording, [segmentPath]),
            returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
              _FakeEither_0<_i5.Failure, String>(
                this,
                Invocation.method(#appendToRecording, [segmentPath]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.AudioRecord>>> loadRecordings() =>
      (super.noSuchMethod(
            Invocation.method(#loadRecordings, []),
            returnValue: _i4.Future<
              _i2.Either<_i5.Failure, List<_i6.AudioRecord>>
            >.value(
              _FakeEither_0<_i5.Failure, List<_i6.AudioRecord>>(
                this,
                Invocation.method(#loadRecordings, []),
              ),
            ),
          )
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.AudioRecord>>>);
}
