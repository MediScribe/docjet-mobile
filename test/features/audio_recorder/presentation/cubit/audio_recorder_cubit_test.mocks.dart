// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/presentation/cubit/audio_recorder_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:docjet_mobile/core/error/failures.dart' as _i6;
import 'package:docjet_mobile/core/usecases/usecase.dart' as _i7;
import 'package:docjet_mobile/features/audio_recorder/domain/entities/audio_record.dart'
    as _i15;
import 'package:docjet_mobile/features/audio_recorder/domain/repositories/audio_recorder_repository.dart'
    as _i2;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/check_permission.dart'
    as _i4;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/delete_recording.dart'
    as _i13;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/load_recordings.dart'
    as _i14;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/pause_recording.dart'
    as _i11;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/request_permission.dart'
    as _i8;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/resume_recording.dart'
    as _i12;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/start_recording.dart'
    as _i9;
import 'package:docjet_mobile/features/audio_recorder/domain/usecases/stop_recording.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioRecorderRepository_0 extends _i1.SmartFake
    implements _i2.AudioRecorderRepository {
  _FakeAudioRecorderRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CheckPermission].
///
/// See the documentation for Mockito's code generation for more information.
class MockCheckPermission extends _i1.Mock implements _i4.CheckPermission {
  MockCheckPermission() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [RequestPermission].
///
/// See the documentation for Mockito's code generation for more information.
class MockRequestPermission extends _i1.Mock implements _i8.RequestPermission {
  MockRequestPermission() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, bool>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, bool>>.value(
              _FakeEither_1<_i6.Failure, bool>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, bool>>);
}

/// A class which mocks [StartRecording].
///
/// See the documentation for Mockito's code generation for more information.
class MockStartRecording extends _i1.Mock implements _i9.StartRecording {
  MockStartRecording() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
              _FakeEither_1<_i6.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [StopRecording].
///
/// See the documentation for Mockito's code generation for more information.
class MockStopRecording extends _i1.Mock implements _i10.StopRecording {
  MockStopRecording() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
              _FakeEither_1<_i6.Failure, String>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, String>>);
}

/// A class which mocks [PauseRecording].
///
/// See the documentation for Mockito's code generation for more information.
class MockPauseRecording extends _i1.Mock implements _i11.PauseRecording {
  MockPauseRecording() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [ResumeRecording].
///
/// See the documentation for Mockito's code generation for more information.
class MockResumeRecording extends _i1.Mock implements _i12.ResumeRecording {
  MockResumeRecording() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(_i7.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [DeleteRecording].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteRecording extends _i1.Mock implements _i13.DeleteRecording {
  MockDeleteRecording() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, void>> call(
    _i13.DeleteRecordingParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, void>>.value(
              _FakeEither_1<_i6.Failure, void>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, void>>);
}

/// A class which mocks [LoadRecordings].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoadRecordings extends _i1.Mock implements _i14.LoadRecordings {
  MockLoadRecordings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAudioRecorderRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AudioRecorderRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i15.AudioRecord>>> call(
    _i7.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i5.Future<
              _i3.Either<_i6.Failure, List<_i15.AudioRecord>>
            >.value(
              _FakeEither_1<_i6.Failure, List<_i15.AudioRecord>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i15.AudioRecord>>>);
}
