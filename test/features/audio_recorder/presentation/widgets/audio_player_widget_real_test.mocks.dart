// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/audio_recorder/presentation/widgets/audio_player_widget_real_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:bloc/bloc.dart' as _i5;
import 'package:docjet_mobile/features/audio_recorder/domain/repositories/audio_recorder_repository.dart'
    as _i2;
import 'package:docjet_mobile/features/audio_recorder/presentation/cubit/audio_list_cubit.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAudioRecorderRepository_0 extends _i1.SmartFake
    implements _i2.AudioRecorderRepository {
  _FakeAudioRecorderRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioListState_1 extends _i1.SmartFake
    implements _i3.AudioListState {
  _FakeAudioListState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioListCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioListCubit extends _i1.Mock implements _i3.AudioListCubit {
  MockAudioListCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AudioRecorderRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAudioRecorderRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AudioRecorderRepository);

  @override
  _i3.AudioListState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAudioListState_1(
          this,
          Invocation.getter(#state),
        ),
      ) as _i3.AudioListState);

  @override
  _i4.Stream<_i3.AudioListState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i4.Stream<_i3.AudioListState>.empty(),
      ) as _i4.Stream<_i3.AudioListState>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i4.Future<void> loadAudioRecordings() => (super.noSuchMethod(
        Invocation.method(
          #loadAudioRecordings,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRecording(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #deleteRecording,
          [filePath],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> playRecording(String? filePath) => (super.noSuchMethod(
        Invocation.method(
          #playRecording,
          [filePath],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> pauseRecording() => (super.noSuchMethod(
        Invocation.method(
          #pauseRecording,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> seekRecording(Duration? position) => (super.noSuchMethod(
        Invocation.method(
          #seekRecording,
          [position],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> stopRecording() => (super.noSuchMethod(
        Invocation.method(
          #stopRecording,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  void emit(_i3.AudioListState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onChange(_i5.Change<_i3.AudioListState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
