// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/jobs/data/services/job_reader_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:docjet_mobile/core/error/failures.dart' as _i8;
import 'package:docjet_mobile/core/interfaces/network_info.dart' as _i12;
import 'package:docjet_mobile/features/jobs/data/datasources/job_local_data_source.dart'
    as _i4;
import 'package:docjet_mobile/features/jobs/data/datasources/job_remote_data_source.dart'
    as _i9;
import 'package:docjet_mobile/features/jobs/data/models/job_api_dto.dart'
    as _i10;
import 'package:docjet_mobile/features/jobs/data/models/job_hive_model.dart'
    as _i6;
import 'package:docjet_mobile/features/jobs/data/services/job_deleter_service.dart'
    as _i11;
import 'package:docjet_mobile/features/jobs/domain/entities/job.dart' as _i2;
import 'package:docjet_mobile/features/jobs/domain/entities/sync_status.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJob_0 extends _i1.SmartFake implements _i2.Job {
  _FakeJob_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUnit_1 extends _i1.SmartFake implements _i3.Unit {
  _FakeUnit_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JobLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobLocalDataSource extends _i1.Mock
    implements _i4.JobLocalDataSource {
  MockJobLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.JobHiveModel>> getAllJobHiveModels() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllJobHiveModels,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.JobHiveModel>>.value(<_i6.JobHiveModel>[]),
      ) as _i5.Future<List<_i6.JobHiveModel>>);

  @override
  _i5.Future<_i6.JobHiveModel?> getJobHiveModelById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobHiveModelById,
          [id],
        ),
        returnValue: _i5.Future<_i6.JobHiveModel?>.value(),
      ) as _i5.Future<_i6.JobHiveModel?>);

  @override
  _i5.Future<void> saveJobHiveModel(_i6.JobHiveModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveJobHiveModel,
          [model],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> deleteJobHiveModel(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteJobHiveModel,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<DateTime?> getLastFetchTime() => (super.noSuchMethod(
        Invocation.method(
          #getLastFetchTime,
          [],
        ),
        returnValue: _i5.Future<DateTime?>.value(),
      ) as _i5.Future<DateTime?>);

  @override
  _i5.Future<void> saveLastFetchTime(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #saveLastFetchTime,
          [time],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Job>> getJobsToSync() => (super.noSuchMethod(
        Invocation.method(
          #getJobsToSync,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Job>>.value(<_i2.Job>[]),
      ) as _i5.Future<List<_i2.Job>>);

  @override
  _i5.Future<void> updateJobSyncStatus(
    String? id,
    _i7.SyncStatus? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJobSyncStatus,
          [
            id,
            status,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Job>> getSyncedJobs() => (super.noSuchMethod(
        Invocation.method(
          #getSyncedJobs,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Job>>.value(<_i2.Job>[]),
      ) as _i5.Future<List<_i2.Job>>);

  @override
  _i5.Future<List<_i2.Job>> getJobsToRetry(
    int? maxRetries,
    Duration? baseBackoffDuration,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobsToRetry,
          [
            maxRetries,
            baseBackoffDuration,
          ],
        ),
        returnValue: _i5.Future<List<_i2.Job>>.value(<_i2.Job>[]),
      ) as _i5.Future<List<_i2.Job>>);

  @override
  _i5.Future<List<_i2.Job>> getJobs() => (super.noSuchMethod(
        Invocation.method(
          #getJobs,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Job>>.value(<_i2.Job>[]),
      ) as _i5.Future<List<_i2.Job>>);

  @override
  _i5.Future<_i2.Job> getJobById(String? localId) => (super.noSuchMethod(
        Invocation.method(
          #getJobById,
          [localId],
        ),
        returnValue: _i5.Future<_i2.Job>.value(_FakeJob_0(
          this,
          Invocation.method(
            #getJobById,
            [localId],
          ),
        )),
      ) as _i5.Future<_i2.Job>);

  @override
  _i5.Future<_i3.Unit> saveJob(_i2.Job? job) => (super.noSuchMethod(
        Invocation.method(
          #saveJob,
          [job],
        ),
        returnValue: _i5.Future<_i3.Unit>.value(_FakeUnit_1(
          this,
          Invocation.method(
            #saveJob,
            [job],
          ),
        )),
      ) as _i5.Future<_i3.Unit>);

  @override
  _i5.Future<_i3.Unit> deleteJob(String? localId) => (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [localId],
        ),
        returnValue: _i5.Future<_i3.Unit>.value(_FakeUnit_1(
          this,
          Invocation.method(
            #deleteJob,
            [localId],
          ),
        )),
      ) as _i5.Future<_i3.Unit>);

  @override
  _i5.Future<List<_i2.Job>> getJobsByStatus(_i7.SyncStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobsByStatus,
          [status],
        ),
        returnValue: _i5.Future<List<_i2.Job>>.value(<_i2.Job>[]),
      ) as _i5.Future<List<_i2.Job>>);

  @override
  _i5.Stream<_i3.Either<_i8.Failure, List<_i2.Job>>> watchJobs() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchJobs,
          [],
        ),
        returnValue: _i5.Stream<_i3.Either<_i8.Failure, List<_i2.Job>>>.empty(),
      ) as _i5.Stream<_i3.Either<_i8.Failure, List<_i2.Job>>>);

  @override
  _i5.Stream<_i3.Either<_i8.Failure, _i2.Job?>> watchJobById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchJobById,
          [id],
        ),
        returnValue: _i5.Stream<_i3.Either<_i8.Failure, _i2.Job?>>.empty(),
      ) as _i5.Stream<_i3.Either<_i8.Failure, _i2.Job?>>);

  @override
  _i5.Future<List<_i6.JobHiveModel>> getJobsPendingSync() =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobsPendingSync,
          [],
        ),
        returnValue:
            _i5.Future<List<_i6.JobHiveModel>>.value(<_i6.JobHiveModel>[]),
      ) as _i5.Future<List<_i6.JobHiveModel>>);

  @override
  _i5.Future<void> clearUserData() => (super.noSuchMethod(
        Invocation.method(
          #clearUserData,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [JobRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobRemoteDataSource extends _i1.Mock
    implements _i9.JobRemoteDataSource {
  MockJobRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i10.JobApiDTO>> fetchJobs() => (super.noSuchMethod(
        Invocation.method(
          #fetchJobs,
          [],
        ),
        returnValue: _i5.Future<List<_i10.JobApiDTO>>.value(<_i10.JobApiDTO>[]),
      ) as _i5.Future<List<_i10.JobApiDTO>>);

  @override
  _i5.Future<_i2.Job> fetchJobById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #fetchJobById,
          [id],
        ),
        returnValue: _i5.Future<_i2.Job>.value(_FakeJob_0(
          this,
          Invocation.method(
            #fetchJobById,
            [id],
          ),
        )),
      ) as _i5.Future<_i2.Job>);

  @override
  _i5.Future<_i2.Job> createJob({
    required String? audioFilePath,
    String? text,
    String? additionalText,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createJob,
          [],
          {
            #audioFilePath: audioFilePath,
            #text: text,
            #additionalText: additionalText,
          },
        ),
        returnValue: _i5.Future<_i2.Job>.value(_FakeJob_0(
          this,
          Invocation.method(
            #createJob,
            [],
            {
              #audioFilePath: audioFilePath,
              #text: text,
              #additionalText: additionalText,
            },
          ),
        )),
      ) as _i5.Future<_i2.Job>);

  @override
  _i5.Future<_i2.Job> updateJob({
    required String? jobId,
    required Map<String, dynamic>? updates,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJob,
          [],
          {
            #jobId: jobId,
            #updates: updates,
          },
        ),
        returnValue: _i5.Future<_i2.Job>.value(_FakeJob_0(
          this,
          Invocation.method(
            #updateJob,
            [],
            {
              #jobId: jobId,
              #updates: updates,
            },
          ),
        )),
      ) as _i5.Future<_i2.Job>);

  @override
  _i5.Future<List<_i2.Job>> syncJobs(List<_i2.Job>? jobsToSync) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncJobs,
          [jobsToSync],
        ),
        returnValue: _i5.Future<List<_i2.Job>>.value(<_i2.Job>[]),
      ) as _i5.Future<List<_i2.Job>>);

  @override
  _i5.Future<_i3.Unit> deleteJob(String? serverId) => (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [serverId],
        ),
        returnValue: _i5.Future<_i3.Unit>.value(_FakeUnit_1(
          this,
          Invocation.method(
            #deleteJob,
            [serverId],
          ),
        )),
      ) as _i5.Future<_i3.Unit>);
}

/// A class which mocks [JobDeleterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobDeleterService extends _i1.Mock implements _i11.JobDeleterService {
  MockJobDeleterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>> deleteJob(String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [localId],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>>.value(
            _FakeEither_2<_i8.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #deleteJob,
            [localId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>>);

  @override
  _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>> permanentlyDeleteJob(
          String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #permanentlyDeleteJob,
          [localId],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>>.value(
            _FakeEither_2<_i8.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #permanentlyDeleteJob,
            [localId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, _i3.Unit>>);

  @override
  _i5.Future<_i3.Either<_i8.Failure, bool>> attemptSmartDelete(
          String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #attemptSmartDelete,
          [localId],
        ),
        returnValue: _i5.Future<_i3.Either<_i8.Failure, bool>>.value(
            _FakeEither_2<_i8.Failure, bool>(
          this,
          Invocation.method(
            #attemptSmartDelete,
            [localId],
          ),
        )),
      ) as _i5.Future<_i3.Either<_i8.Failure, bool>>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i12.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Stream<bool> get onConnectivityChanged => (super.noSuchMethod(
        Invocation.getter(#onConnectivityChanged),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);
}
