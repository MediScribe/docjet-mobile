// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/jobs/domain/usecases/reset_failed_job_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:docjet_mobile/core/error/failures.dart' as _i5;
import 'package:docjet_mobile/features/jobs/domain/entities/job.dart' as _i6;
import 'package:docjet_mobile/features/jobs/domain/entities/job_update_details.dart'
    as _i7;
import 'package:docjet_mobile/features/jobs/domain/repositories/job_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JobRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobRepository extends _i1.Mock implements _i3.JobRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Job>>> getJobs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobs,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, List<_i6.Job>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.Job>>(
          this,
          Invocation.method(
            #getJobs,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.Job>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.Job>>(
          this,
          Invocation.method(
            #getJobs,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Job>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Job?>> getJobById(String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobById,
          [localId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Job?>>.value(
            _FakeEither_0<_i5.Failure, _i6.Job?>(
          this,
          Invocation.method(
            #getJobById,
            [localId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Job?>>.value(
                _FakeEither_0<_i5.Failure, _i6.Job?>(
          this,
          Invocation.method(
            #getJobById,
            [localId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Job?>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Job>>> watchJobs() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchJobs,
          [],
        ),
        returnValue: _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Job>>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Job>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Job>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i6.Job?>> watchJobById(String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchJobById,
          [localId],
        ),
        returnValue: _i4.Stream<_i2.Either<_i5.Failure, _i6.Job?>>.empty(),
        returnValueForMissingStub:
            _i4.Stream<_i2.Either<_i5.Failure, _i6.Job?>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, _i6.Job?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Job>> createJob({
    required String? audioFilePath,
    String? text,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createJob,
          [],
          {
            #audioFilePath: audioFilePath,
            #text: text,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Job>>.value(
            _FakeEither_0<_i5.Failure, _i6.Job>(
          this,
          Invocation.method(
            #createJob,
            [],
            {
              #audioFilePath: audioFilePath,
              #text: text,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Job>>.value(
                _FakeEither_0<_i5.Failure, _i6.Job>(
          this,
          Invocation.method(
            #createJob,
            [],
            {
              #audioFilePath: audioFilePath,
              #text: text,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Job>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Job>> updateJob({
    required String? localId,
    required _i7.JobUpdateDetails? updates,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJob,
          [],
          {
            #localId: localId,
            #updates: updates,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Job>>.value(
            _FakeEither_0<_i5.Failure, _i6.Job>(
          this,
          Invocation.method(
            #updateJob,
            [],
            {
              #localId: localId,
              #updates: updates,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Job>>.value(
                _FakeEither_0<_i5.Failure, _i6.Job>(
          this,
          Invocation.method(
            #updateJob,
            [],
            {
              #localId: localId,
              #updates: updates,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Job>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteJob(String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [localId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteJob,
            [localId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteJob,
            [localId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> syncPendingJobs() =>
      (super.noSuchMethod(
        Invocation.method(
          #syncPendingJobs,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #syncPendingJobs,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #syncPendingJobs,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> reconcileJobsWithServer() =>
      (super.noSuchMethod(
        Invocation.method(
          #reconcileJobsWithServer,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #reconcileJobsWithServer,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #reconcileJobsWithServer,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> resetFailedJob(
          String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #resetFailedJob,
          [localId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #resetFailedJob,
            [localId],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
                _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #resetFailedJob,
            [localId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}
