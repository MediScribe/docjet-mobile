// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/jobs/integration/job_lifecycle_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:io' as _i3;
import 'dart:typed_data' as _i14;

import 'package:dartz/dartz.dart' as _i2;
import 'package:docjet_mobile/core/error/failures.dart' as _i6;
import 'package:docjet_mobile/core/platform/file_system.dart' as _i13;
import 'package:docjet_mobile/features/jobs/data/models/job_update_data.dart'
    as _i10;
import 'package:docjet_mobile/features/jobs/data/services/job_deleter_service.dart'
    as _i11;
import 'package:docjet_mobile/features/jobs/data/services/job_reader_service.dart'
    as _i4;
import 'package:docjet_mobile/features/jobs/data/services/job_sync_service.dart'
    as _i12;
import 'package:docjet_mobile/features/jobs/data/services/job_writer_service.dart'
    as _i9;
import 'package:docjet_mobile/features/jobs/domain/entities/job.dart' as _i7;
import 'package:docjet_mobile/features/jobs/domain/entities/sync_status.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_1 extends _i1.SmartFake implements _i3.FileStat {
  _FakeFileStat_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [JobReaderService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobReaderService extends _i1.Mock implements _i4.JobReaderService {
  MockJobReaderService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Job>>> getJobs() =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobs,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i7.Job>>>.value(
            _FakeEither_0<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #getJobs,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.Job>>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Job>> getJobById(String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobById,
          [localId],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>.value(
            _FakeEither_0<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #getJobById,
            [localId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, List<_i7.Job>>> getJobsByStatus(
          _i8.SyncStatus? status) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJobsByStatus,
          [status],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, List<_i7.Job>>>.value(
            _FakeEither_0<_i6.Failure, List<_i7.Job>>(
          this,
          Invocation.method(
            #getJobsByStatus,
            [status],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, List<_i7.Job>>>);
}

/// A class which mocks [JobWriterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobWriterService extends _i1.Mock implements _i9.JobWriterService {
  MockJobWriterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Job>> createJob({
    required String? audioFilePath,
    String? text,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createJob,
          [],
          {
            #audioFilePath: audioFilePath,
            #text: text,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>.value(
            _FakeEither_0<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #createJob,
            [],
            {
              #audioFilePath: audioFilePath,
              #text: text,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Job>> updateJob({
    required String? localId,
    required _i10.JobUpdateData? updates,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJob,
          [],
          {
            #localId: localId,
            #updates: updates,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>.value(
            _FakeEither_0<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #updateJob,
            [],
            {
              #localId: localId,
              #updates: updates,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> updateJobSyncStatus({
    required String? localId,
    required _i8.SyncStatus? status,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateJobSyncStatus,
          [],
          {
            #localId: localId,
            #status: status,
          },
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i6.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateJobSyncStatus,
            [],
            {
              #localId: localId,
              #status: status,
            },
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
}

/// A class which mocks [JobDeleterService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobDeleterService extends _i1.Mock implements _i11.JobDeleterService {
  MockJobDeleterService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> deleteJob(String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteJob,
          [localId],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i6.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteJob,
            [localId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> permanentlyDeleteJob(
          String? localId) =>
      (super.noSuchMethod(
        Invocation.method(
          #permanentlyDeleteJob,
          [localId],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i6.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #permanentlyDeleteJob,
            [localId],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);
}

/// A class which mocks [JobSyncService].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobSyncService extends _i1.Mock implements _i12.JobSyncService {
  MockJobSyncService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>> syncPendingJobs() =>
      (super.noSuchMethod(
        Invocation.method(
          #syncPendingJobs,
          [],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i6.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #syncPendingJobs,
            [],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i2.Unit>>);

  @override
  _i5.Future<_i2.Either<_i6.Failure, _i7.Job>> syncSingleJob(_i7.Job? job) =>
      (super.noSuchMethod(
        Invocation.method(
          #syncSingleJob,
          [job],
        ),
        returnValue: _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>.value(
            _FakeEither_0<_i6.Failure, _i7.Job>(
          this,
          Invocation.method(
            #syncSingleJob,
            [job],
          ),
        )),
      ) as _i5.Future<_i2.Either<_i6.Failure, _i7.Job>>);
}

/// A class which mocks [FileSystem].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSystem extends _i1.Mock implements _i13.FileSystem {
  MockFileSystem() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i3.FileStat> stat(String? path) => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [path],
        ),
        returnValue: _i5.Future<_i3.FileStat>.value(_FakeFileStat_1(
          this,
          Invocation.method(
            #stat,
            [path],
          ),
        )),
      ) as _i5.Future<_i3.FileStat>);

  @override
  _i5.Future<bool> fileExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #fileExists,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> deleteFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #deleteFile,
          [path],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> directoryExists(String? path) => (super.noSuchMethod(
        Invocation.method(
          #directoryExists,
          [path],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> createDirectory(
    String? path, {
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createDirectory,
          [path],
          {#recursive: recursive},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Stream<_i3.FileSystemEntity> listDirectory(String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #listDirectory,
          [path],
        ),
        returnValue: _i5.Stream<_i3.FileSystemEntity>.empty(),
      ) as _i5.Stream<_i3.FileSystemEntity>);

  @override
  _i5.Future<void> writeFile(
    String? path,
    _i14.Uint8List? bytes,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeFile,
          [
            path,
            bytes,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<int>> readFile(String? path) => (super.noSuchMethod(
        Invocation.method(
          #readFile,
          [path],
        ),
        returnValue: _i5.Future<List<int>>.value(<int>[]),
      ) as _i5.Future<List<int>>);
}
