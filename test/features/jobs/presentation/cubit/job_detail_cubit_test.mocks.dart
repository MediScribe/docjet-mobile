// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/jobs/presentation/cubit/job_detail_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i5;
import 'package:docjet_mobile/core/error/failures.dart' as _i6;
import 'package:docjet_mobile/features/jobs/domain/entities/job.dart' as _i7;
import 'package:docjet_mobile/features/jobs/domain/repositories/job_repository.dart'
    as _i2;
import 'package:docjet_mobile/features/jobs/domain/usecases/watch_job_by_id_use_case.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJobRepository_0 extends _i1.SmartFake implements _i2.JobRepository {
  _FakeJobRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WatchJobByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchJobByIdUseCase extends _i1.Mock
    implements _i3.WatchJobByIdUseCase {
  MockWatchJobByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.JobRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeJobRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.JobRepository);

  @override
  _i4.Stream<_i5.Either<_i6.Failure, _i7.Job?>> call(
    _i3.WatchJobParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Stream<_i5.Either<_i6.Failure, _i7.Job?>>.empty(),
          )
          as _i4.Stream<_i5.Either<_i6.Failure, _i7.Job?>>);
}
