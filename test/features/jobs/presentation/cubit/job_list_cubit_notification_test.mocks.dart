// Mocks generated by Mockito 5.4.5 from annotations
// in docjet_mobile/test/features/jobs/presentation/cubit/job_list_cubit_notification_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:docjet_mobile/core/common/models/app_message.dart' as _i9;
import 'package:docjet_mobile/core/common/notifiers/app_notifier_service.dart'
    as _i8;
import 'package:docjet_mobile/core/error/failures.dart' as _i7;
import 'package:docjet_mobile/features/jobs/domain/repositories/job_repository.dart'
    as _i2;
import 'package:docjet_mobile/features/jobs/domain/usecases/delete_job_use_case.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:riverpod_annotation/riverpod_annotation.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJobRepository_0 extends _i1.SmartFake implements _i2.JobRepository {
  _FakeJobRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAutoDisposeNotifierProviderRef_2<T> extends _i1.SmartFake
    implements _i4.AutoDisposeNotifierProviderRef<T> {
  _FakeAutoDisposeNotifierProviderRef_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeleteJobUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteJobUseCase extends _i1.Mock implements _i5.DeleteJobUseCase {
  MockDeleteJobUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.JobRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeJobRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.JobRepository);

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>> call(
          _i5.DeleteJobParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>.value(
            _FakeEither_1<_i7.Failure, _i3.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i3.Unit>>);
}

/// A class which mocks [AppNotifierService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppNotifierService extends _i1.Mock
    implements _i8.AppNotifierService {
  MockAppNotifierService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.AutoDisposeNotifierProviderRef<_i9.AppMessage?> get ref =>
      (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _FakeAutoDisposeNotifierProviderRef_2<_i9.AppMessage?>(
          this,
          Invocation.getter(#ref),
        ),
      ) as _i4.AutoDisposeNotifierProviderRef<_i9.AppMessage?>);

  @override
  set state(_i9.AppMessage? value) => super.noSuchMethod(
        Invocation.setter(
          #state,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void show({
    required String? message,
    required _i9.MessageType? type,
    Duration? duration,
    String? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #show,
          [],
          {
            #message: message,
            #type: type,
            #duration: duration,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dismiss() => super.noSuchMethod(
        Invocation.method(
          #dismiss,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void listenSelf(
    void Function(
      _i9.AppMessage?,
      _i9.AppMessage?,
    )? listener, {
    void Function(
      Object,
      StackTrace,
    )? onError,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #listenSelf,
          [listener],
          {#onError: onError},
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool updateShouldNotify(
    _i9.AppMessage? previous,
    _i9.AppMessage? next,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [
            previous,
            next,
          ],
        ),
        returnValue: false,
      ) as bool);
}
